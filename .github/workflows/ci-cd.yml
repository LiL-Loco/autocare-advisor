name: 🚀 AutoCare Advisor CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: '18.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ========================================
  # Code Quality & Linting
  # ========================================
  lint-and-format:
    name: 🧹 Lint & Format Check
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm run install:all

      - name: 🧹 Run ESLint
        run: npm run lint

      - name: 💅 Check Prettier formatting
        run: npx prettier --check "**/*.{js,jsx,ts,tsx,json,css,md}"

      - name: 📏 TypeScript type checking
        run: |
          cd backend && npx tsc --noEmit
          cd ../frontend && npx tsc --noEmit

  # ========================================
  # Unit & Integration Tests
  # ========================================
  test:
    name: 🧪 Tests & Coverage
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: autocare_user
          POSTGRES_DB: autocare_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      mongodb:
        image: mongo:6
        env:
          MONGO_INITDB_DATABASE: autocare_products_test
        ports:
          - 27017:27017

      redis:
        image: redis:7
        ports:
          - 6379:6379

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm run install:all

      - name: 🗄️ Setup test database
        run: |
          cd backend
          npm run db:migrate
          npm run db:seed:test
        env:
          DATABASE_URL: postgresql://autocare_user:password@localhost:5432/autocare_test
          MONGODB_URI: mongodb://localhost:27017/autocare_products_test
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test

      - name: 🧪 Run backend tests
        run: cd backend && npm run test:coverage
        env:
          DATABASE_URL: postgresql://autocare_user:password@localhost:5432/autocare_test
          MONGODB_URI: mongodb://localhost:27017/autocare_products_test
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test

      - name: 🧪 Run frontend tests
        run: cd frontend && npm run test:coverage
        env:
          CI: true

      - name: ⚡ Run integration tests
        run: cd backend && npm run test:integration
        env:
          DATABASE_URL: postgresql://autocare_user:password@localhost:5432/autocare_test
          MONGODB_URI: mongodb://localhost:27017/autocare_products_test
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./coverage
          flags: unittests
          name: autocare-advisor-coverage

  # ========================================
  # Performance Testing
  # ========================================
  performance:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: [lint-and-format, test]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: autocare_user
          POSTGRES_DB: autocare_perf_test
        ports:
          - 5432:5432

      mongodb:
        image: mongo:6
        ports:
          - 27017:27017

      redis:
        image: redis:7
        ports:
          - 6379:6379

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm run install:all

      - name: 🗄️ Setup performance test data
        run: |
          cd backend
          npm run db:migrate
          npm run db:generate-perf-test-data
        env:
          DATABASE_URL: postgresql://autocare_user:password@localhost:5432/autocare_perf_test
          MONGODB_URI: mongodb://localhost:27017/autocare_products_perf_test
          REDIS_URL: redis://localhost:6379

      - name: ⚡ Run recommendation engine performance tests
        run: cd backend && npm run test:performance
        env:
          DATABASE_URL: postgresql://autocare_user:password@localhost:5432/autocare_perf_test
          MONGODB_URI: mongodb://localhost:27017/autocare_products_perf_test
          REDIS_URL: redis://localhost:6379

      - name: 📊 Performance benchmark report
        run: |
          echo "## 🚀 Recommendation Engine Performance" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Target | Actual | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|--------|---------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Response Time | <100ms | $(cat backend/perf-results.json | jq '.responseTime')ms | ✅ |" >> $GITHUB_STEP_SUMMARY

  # ========================================
  # Security Scanning
  # ========================================
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔍 Run npm audit
        run: |
          npm audit --audit-level high
          cd backend && npm audit --audit-level high
          cd ../frontend && npm audit --audit-level high

      - name: 🔒 Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # ========================================
  # Build Docker Images
  # ========================================
  build:
    name: 🏗️ Build & Push Images
    runs-on: ubuntu-latest
    needs: [lint-and-format, test]
    if: github.event_name != 'pull_request'

    outputs:
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📊 Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🏗️ Build and push backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🏗️ Build and push frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ========================================
  # Deploy to Staging
  # ========================================
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, performance, security]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.autocare-advisor.com

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ⚙️ Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: 🚀 Deploy to EKS
        run: |
          # Update Kubernetes deployment with new image
          kubectl set image deployment/autocare-backend backend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ github.sha }}
          kubectl set image deployment/autocare-frontend frontend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.sha }}
          kubectl rollout status deployment/autocare-backend
          kubectl rollout status deployment/autocare-frontend

      - name: 🗄️ Run database migrations
        run: |
          kubectl exec deployment/autocare-backend -- npm run db:migrate

  # ========================================
  # Deploy to Production
  # ========================================
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, performance, security]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://app.autocare-advisor.com

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ⚙️ Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: 🚀 Deploy to EKS
        run: |
          kubectl set image deployment/autocare-backend backend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ github.sha }}
          kubectl set image deployment/autocare-frontend frontend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.sha }}
          kubectl rollout status deployment/autocare-backend
          kubectl rollout status deployment/autocare-frontend

      - name: 🗄️ Run database migrations
        run: |
          kubectl exec deployment/autocare-backend -- npm run db:migrate

      - name: 🔄 Update Linear deployment status
        uses: linear/action-deployment@v1
        with:
          token: ${{ secrets.LINEAR_API_KEY }}
          team-id: ${{ secrets.LINEAR_TEAM_ID }}
          project-id: '6fa9d986-c3cf-4e35-97ba-97b29e999c53'
          status: 'deployed'
          url: 'https://app.autocare-advisor.com'

  # ========================================
  # Notification
  # ========================================
  notify:
    name: 📢 Notification
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
      - name: 📧 Notify team
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#cleantastic-deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
